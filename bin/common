#!/bin/bash 

_gojq_data() {
  gojq -r '.data.[]'
}

_rancher_registr_cmd() {
  # 1. FQDN URL of the MNG cluster
  # 2. API token
  # 3. Downstream cluster name (as in Rancher GUI)
  # 4. VM/node role: worker or control

  # In order to get registration cmd for adding nodes, we first need to get rancher's internal name for the downstream cluster.
  _clusterId=$(curl --silent --fail -u ${2} "${1}/v3/clusters" | _gojq_data | gojq -r --arg cluster "${3}" 'select(.name==$cluster) | .id')
  # For local debugging only. This may not be activated for the "production" purposes because
  # other scripts read output of this function.
  # _info "Register Rancher Node for cluster: ${_clusterId}"

  # We first try to extract command from JSON object, which has creatorID != null
  _command=$(curl --silent --fail -u ${2} "${1}/v3/clusterregistrationtokens" | _gojq_data | gojq -r --arg clusterID "${_clusterId}" 'select((.clusterId==$clusterID) and (.creatorId != null)) | .nodeCommand')

  if [[ -z "${_command}" ]]; then
    # Otherwise, look at JSON object with name = "default-token"
    _command=$(curl --silent --fail -u ${2} "${1}/v3/clusterregistrationtokens" | _gojq_data | gojq -r --arg clusterID "${_clusterId}" 'select((.clusterId==$clusterID) and (.name == "default-token")) | .nodeCommand')
  fi

  if [[ "${4}" == "worker" ]]; then
    echo "${_command} --worker"
  else
    echo "${_command} --etcd --controlplane"
  fi
}
